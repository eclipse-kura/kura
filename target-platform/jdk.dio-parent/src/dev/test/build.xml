<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 
 This code is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License version 2 only, as
 published by the Free Software Foundation.  Oracle designates this
 particular file as subject to the "Classpath" exception as provided
 by Oracle in the LICENSE file that accompanied this code.
 
 This code is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 version 2 for more details (a copy is included in the LICENSE file that
 accompanied this code).
 
 You should have received a copy of the GNU General Public License version
 2 along with this work; if not, write to the Free Software Foundation,
 Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 
 Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 or visit www.oracle.com if you need additional information or have any
 questions.
-->
<project name="DIOTests" default="default" basedir=".">
    <description>Builds, tests, and runs DIO tests.</description>
    <import file="nbproject/build-impl.xml"/>
    <loadproperties srcfile="build.properties" />
    <property environment="env"/>
               
    <target name="clean">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>
    
    <target name="compile" depends="check-and-copy-libs">
        <mkdir dir="${classes.dir}" />
        <javac srcdir="${tests.dir}"
               destdir="${classes.dir}"
               includeantruntime="false"
               debug="true"
               classpath="${javatest.jar}${path.separator}${dio.jar}${path.separator}${gson.jar}">
        </javac>
        <copy file="${i18nsrcpath}"
              todir="${i18ndistpath}">
        </copy>
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="${dist.dir}" />
        <jar basedir="${classes.dir}" destfile="${dist.dir}/${dist.jar}">
        </jar>
    </target>
    
    <target name="check-and-copy-libs">
        <copy file="${src.build.dir.jar}" todir="${libs.dir}" />
        <fail message="Required libraries are missing">
            <condition>
                <or>
                    <not>
                        <available file="${gson.jar}"/>
                    </not>
                    <not>
                        <available file="${javatest.jar}"/>
                    </not>
                    <not>
                        <available file="${jh.jar}"/>
                    </not>
                </or>
            </condition>
        </fail>
    </target>

    <pathconvert property="javahomefixed" dirsep="/">          
        <path location="${env.JAVA_HOME}${file.separator}bin${file.separator}java.exe"/> 
    </pathconvert>
    
    <pathconvert property="i18nsrcpath" dirsep="/">          
        <path location="${basedir}${file.separator}${tests.dir}${file.separator}${i18n.file.path}${file.separator}${i18n.file.name}"/> 
    </pathconvert>    
    
    <pathconvert property="i18ndistpath" dirsep="/">          
        <path location="${basedir}${file.separator}${classes.dir}${file.separator}${i18n.file.path}"/> 
    </pathconvert>

    <pathconvert property="librarypathfixed" dirsep="/">          
        <path location="${basedir}${file.separator}${src.build.dir.so}"/> 
    </pathconvert>
    
    <pathconvert property="policyfilepathfixed" dirsep="/">          
        <path location="${basedir}${file.separator}${java.policy.file}"/> 
    </pathconvert>
    
    <pathconvert property="diopropertiesfilepathfixed" dirsep="/">          
        <path location="${basedir}${file.separator}${dio.properties.file.raspberry}"/> 
    </pathconvert>
    
    <target name="prepare">
        <property name="testsuite_path" value="${basedir}/${tests.dir}"/>
        <property name="test.basedir" value="${build.dir}" />
        <property name="tests.classpath" value="${classes.dir}${path.separator}${javatest.jar}${path.separator}${jh.jar}${path.separator}${dio.jar}${path.separator}${gson.jar}"/>
        <property name="workdir" value="${test.basedir}${file.separator}${workdir.folder.name}"/>
        <property name="javatest.java" value="${javahomefixed}"/> 
        <property name="librarypath" value="${librarypathfixed}"/>
        <property name="policyfilepath" value="${policyfilepathfixed}"/>
        <property name="diopropertiesfilepath" value="${diopropertiesfilepathfixed}"/>
        <property name="javatest.jti" value="${test.basedir}${file.separator}${jti.file.name}"/> 
    </target>

    <target name="filter">
        <filter filtersfile="${javatest.jti.template}" />
        <filter token="testsuite" value="${testsuite_path}"/>
        <filter token="workdir" value="${workdir}"/>
        <filter token="classpath" value="${tests.classpath}"/>
        <filter token="java" value="${javatest.java}"/>        
        <filter token="javalibrarypath" value="${librarypath}"/>
        <filter token="javapolicyfilepath" value="${policyfilepath}"/>
        <filter token="diopropertiesfilepath" value="${diopropertiesfilepath}"/>
        <!--<filter token="vmOptions" value="-Ddeviceaccess.uart.prefix=${uart.device}"/>-->
        <filter token="vmOptions" value=""/>
        <copy filtering="true" file="${javatest.jti.template}" tofile="${javatest.jti}"/>
        <property name="javatest.mode.batch" value="true"/>
    </target>

    <target name="check-java-home">
        <fail message="JAVA_HOME is not set">
            <condition>
                <not>
                    <isset property="env.JAVA_HOME"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="javatest-mode-warning" if="${batch.mode}" depends="get-batch-mode">
        <echo message="Tests will be run in batch mode. For UI mode use flag -Djavatest.mode.batch=false"  />
    </target>
            
    <target name="get-batch-mode" depends="get-javatest-opt">
        <condition property="batch.mode" value="true" else="false">
            <equals arg1="${javatest.opt}" arg2="-batch" />
        </condition>
    </target>
    
    <target name="get-javatest-opt">
        <condition property="javatest.opt" value="-batch" else="">
            <equals arg1="${javatest.mode.batch}" arg2="true" />
        </condition>
    </target>

    <target name="run-javatest" depends="check-java-home, init, prepare, jar, filter, javatest-mode-warning">
        <mkdir dir="${workdir}"/>

        <java classpath="${classes.dir}${path.separator}${javatest.jar}${path.separator}${jh.jar}${path.separator}${gson.jar}" 
              classname="com.sun.javatest.tool.Main" fork="true" failonerror="false" jvm="${javatest.java}">
            <arg line="-testsuite"/>
            <arg line="${testsuite_path}"/>
            <arg line="-workdir"/>
            <arg line="${workdir}"/>
            <arg line="-config"/>
            <arg line="${javatest.jti}"/>
            <arg line="${javatest.opt}"/>
        </java>
    </target>

</project>